name: dv-configbaker
description: |
  "This GitHub Action serves as a powerful tool to create a functional Dataverse instance, enabling developers to run tests and perform other critical tasks within their GitHub CI workflows."
inputs:
  image_tag:
    description: "Tag of image for Dataverse app and Configbaker"
    required: true
    default: "unstable"
  image_dataverse:
    description: "Name of Dataverse app image (can include registry)"
    required: true
    default: "docker.io/gdcc/dataverse"
  image_configbaker:
    description: "Name of Configbaker image (can include registry)"
    required: true
    default: "docker.io/gdcc/configbaker"
  postgresql_version:
    description: "Override the PostgreSQL version to use"
    required: false
  solr_version:
    description: "Override the Solr version to use"
    required: false
  create-dv:
    description: "Whether or not to create an example Dataverse"
    required: true
    default: "true"
runs:
  using: "composite"
  steps:
    - name: "Pull images for inspection and cache"
      shell: bash
      run: |
        docker pull -q ${{ inputs.image_dataverse }}:${{ inputs.image_tag }}
        docker pull -q ${{ inputs.image_configbaker }}:${{ inputs.image_tag }}
    - name: "Prepare environment variables"
      shell: bash
      run: |
        PG_VERSION="${{ inputs.postgresql_version }}"
        PG_VERSION="${PG_VERSION:-$(docker inspect -f '{{ index .Config.Labels "org.dataverse.deps.postgresql.version"}}' '${{ inputs.image_dataverse }}:${{ inputs.image_tag }}')}"
        if [[ -z "${PG_VERSION}" ]]; then
          echo "Cannot find PostgreSQL version"; exit 1
        else
          echo "POSTGRES_VERSION=$PG_VERSION" | tee -a "${GITHUB_ENV}" 
        fi
        
        SOLR_VERSION=${{ inputs.solr_version }}
        SOLR_VERSION="${SOLR_VERSION:-$(docker inspect -f '{{ index .Config.Labels "org.dataverse.deps.solr.version"}}' '${{ inputs.image_dataverse }}:${{ inputs.image_tag }}')}"
        if [[ -z "${SOLR_VERSION}" ]]; then
          echo "Cannot find Solr version"; exit 1
        else
          echo "SOLR_VERSION=$SOLR_VERSION" | tee -a "${GITHUB_ENV}" 
        fi
        
        echo "CONFIGBAKER_IMAGE=${{ inputs.image_configbaker }}:${{ inputs.image_tag }}" | tee -a "${GITHUB_ENV}"
        echo "DATAVERSE_IMAGE=${{ inputs.image_dataverse }}:${{ inputs.image_tag }}" | tee -a "${GITHUB_ENV}"
        echo "DATAVERSE_DB_USER=dataverse" | tee -a "${GITHUB_ENV}"
        echo "DATAVERSE_DB_PASSWORD=secret" | tee -a "${GITHUB_ENV}"
    - name: "Start Dataverse service in background"
      shell: bash
      run: |
        echo "::group::ü•é Start Dataverse service in background"
        docker compose -f ${{ github.action_path }}/docker-compose.yml -p apitest up -d --quiet-pull \
          && echo -e "‚úÖÔ∏è Dataverse containers have been started."
        echo "::endgroup::"
    # Bootstrap will wait up until accessible, so blocking here.
    - name: "Bootstrap Dataverse service"
      shell: bash
      run: |
        echo "::group::ü§ñ Bootstrap Dataverse service"
        docker run -i --network apitest_dataverse "${CONFIGBAKER_IMAGE}" bootstrap.sh dev
        echo "::endgroup::"
    - name: Retrieve API Token
      run: ${{ github.action_path }}/scripts/get_api_token.sh
      shell: bash
    - name: Create Dataverse
      run: ${{ github.action_path }}/scripts/create_dataverse.sh
      shell: bash
